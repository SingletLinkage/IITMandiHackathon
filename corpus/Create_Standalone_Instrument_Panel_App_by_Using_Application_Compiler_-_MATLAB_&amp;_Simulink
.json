{
    "title": "Create Standalone Instrument Panel App by Using Application Compiler - MATLAB &amp; Simulink\n",
    "introduction": "Simulink Real-Time Explorer | Instrument",
    "chunks": [
        {
            "heading": "Package App by Using Application Compiler",
            "content": "After developing a real-time application and an App Designer instrument panel app that provides and interface to the real-time application, you can use the Application Compiler to package the app.\n\nOpen MATLAB\u00c2\u00ae and set the current folder to the folder in which you are creating the standalone executable instrument panel.\n\nSelect Apps > Application Compiler. For more information, see Application Compiler (MATLAB Compiler).\n\nPopulate the Application Compiler dialog box with information for the application compiler project. The image shows the example selections for project MyInstPanel_slrt_ex_osc.prj. The compiler settings are:\n\nMain file: myInstPanel_slrt_ex_osc.mlappApplication Name: myInstPanelAuthor Name: J. DoeEmail: jdoe@mycompany.comCompany: MyCompanySummary: This standalone application provides an interface to a real-time application.Description: This standalone application provides an interface to a real-time application.Default installation folder: %ProgramFiles%\\MyCompany\\myAppTesting\\Do not display the Windows Command Shell (console) for execution: Yes\n\nYour choice of whether to select Runtime downloaded or Runtime included packaging options for the project influences the length of time for packaging and for installing the application. If the development computer that will be running the standalone executable instrument panel has internet access, select downloaded. If not, select included.\n\nFor Suggested Support Packages, select the Simulink Real-Time Target Support Package.\n\nFor Files required for your application to run, select the real-time application MLDATX file.\n\nNote: To enable downloading a real-time application to a target computer, the name of the application must be specified in the Load Button component of the instrument panel.\n\nSave the Application Compiler project as myInstPanel.prj.\n\nIn the Application Compiler dialog box, select Package. The Package status indicates completion of the packaging stages. When completed, click Close.\n\nThe packaging process outputs folders for_redistribution, for_redistribution_files_only, and for_testing."
        },
        {
            "heading": "Install Instrument Panel Application",
            "content": "To install the instrument panel application, run the executable file from the for_redistribution folder.\n\nOn Windows\n\nIf you selected Runtime downloaded from web for the project, run installer MyAppInstaller_web.exe.If you selected Runtime included in package for the project, run installer MyAppInstaller_mcr.exe.\n\nOn Linux\n\nIf you selected Runtime downloaded from web for the project, run installer MyAppInstaller_web.install.If you selected Runtime included in package for the project, run installer MyAppInstaller_mcr.install.\n\nFor this example, installer executable file is MyAppInstaller_mcr.exe. When run, this file installs the MATLAB runtime and installs the instrument panel executable file:\n\nC:\\Program Files\\MyCompany\\MyInstPanel_slrt_ex_osc\\application\\MyInstPanel_slrt_ex_osc.exe\n\nTip: Make a note of the MATLAB run time path in this step. The path can be used to run the standalone application on Linux system.\n\nTo test the standalone executable instrument panel, close MATLAB and run the MyInstPanel_slrt_ex_osc EXE file.\n\nOn Windows\n\nrun the MyInstPanel_slrt_ex_osc EXE file\n\nOn Linux\n\nrun the command\n\n./run_MyInstPanel_slrt_ex_osc.sh /usr/local/MATLAB/MATLAB_Runtime/v911\n\nUse the instrument panel to connect to the target computer by inserting the target computer IP address (for example, 192.168.7.5) in place of the target computer name (for example, TargetPC1). Load the real-time application, and start the application. Observe that the instrument panel provides an interface to control the real-time application.\n\nIf you modify your real-time application or instrument panel app and repackage these, you do not need to send the installer to your end-users. Instead, you can send them the updated EXE file from the for_redistribution_files_only folder to replace the EXE file in their application folder.\n\nNote: If your system uses firewall software such as the Window Defender Firewall and you have configured exceptions for MATLAB\u00c2\u00ae to let Simulink\u00c2\u00ae Real-Time\u00e2\u0084\u00a2 communicate with the target computer through the firewall, configure exceptions for your compiled application so it can communicate with the target computer. For more information, see Troubleshoot Communication Failure Through Firewall (Windows)."
        }
    ],
    "link": "https://in.mathworks.com/help/slrealtime/ug/create-standalone-instrument-panel-app-by-using-application-compiler.html",
    "images": [
        "https://in.mathworks.com/help/examples/slrealtime/win64/CreateStandaloneInstPanelAppWithAppCompilerExample_01.png"
    ]
}