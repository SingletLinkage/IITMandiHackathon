{
    "title": "Call Reusable Hardware-Independent External Code for Simulation and Code Generation",
    "introduction": "Code reuse offers business and technological advantages. From a business perspective, code reuse saves time and resources. From a technological perspective, code reuse promotes consistency and reduces memory requirements. Other considerations include: Examples of reusable hardware-independent algorithmic code to consider importing into the SimulinkÂ® environment for simulation and code generation include:",
    "chunks": [
        {
            "heading": "Workflow",
            "content": "To call reusable external algorithm code for simulation and code generation, iterate through the tasks listed in this table.\n\nTaskActionMore Information1Review your assessment of external code characteristics and integration requirements.Choose an External Code Integration Workflow2Choose an integration technique to add the external code to a Simulink model.Choose an Integration Technique3Verify algorithm behavior and performance by simulating the model.Simulation4Define the representation of model data for code generation.Code Interface Configuration and Exchange Data Between External C/C++ Code and Simulink Model or Generated Code5Configure the model for code generation.Model Configuration Set Customization 6Generate code and a code generation report.Code Generation7Review the generated code interface and static code metrics.Analyze Generated Data Code Interface Report, Analyze Generated Service Code Interface Report, and Static Code Metrics8Build an executable program from the model.Build Integrated Code Within the Simulink Environment9Verify that executable program behaves as expected.Verification and TestingVerification, Testing, and Certification"
        },
        {
            "heading": "Choose an Integration Technique",
            "content": "Several techniques are available for integrating reusable hardware-independent algorithmic code into the Simulink environment. Some techniques integrate external code directly. Other approaches convert the external code to Simulink or StateflowÂ® modeling elements. The integration technique that you choose depends on:\n\nProgramming language of the external code â MATLABÂ®, C, C++, or FortranYour programming language experience and preferencePerformance requirementsWhether the algorithm models continuous time dynamics or you are integrating the algorithm into an application that uses discrete and continuous timeWhether you want to take advantage of Model-Based DesignLevel of control required over the code that the code generator produces\n\nTo choose an integration technique for a reusable algorithm, see the subsection that matches the programming language of your external code.\n\nIntegration Techniques for External MATLAB CodeIntegration Techniques for External C or C++ CodeIntegration Approaches for External Fortran Code"
        },
        {
            "heading": "Integration Techniques for External MATLAB Code",
            "content": "Multiple techniques are available for integrating external MATLAB code into the Simulink environment. Use this table to choose the best integration technique for your application.\n\nCondition or RequirementActionMore Information External code complies with the MATLAB code generation subsetYou want to call MATLAB code from a Simulink model Add a MATLAB Function block to the model. Embed the MATLAB code in the block. Integrate C Code by Using the MATLAB Function BlockMATLAB Function External code complies with the MATLAB code generation subsetYou want to call MATLAB code from a Simulink modelYour external code includes iterative computations that process large streams of data Add a MATLAB System block to the model. Embed the MATLAB code in the block as a System objectâ¢. Integrate C Code by Using the MATLAB Function BlockMATLAB System External code complies with the MATLAB code generation subsetYou want to call MATLAB code from a Simulink modelYour external code includes design logic that is based on state machines and flow charts Add a Stateflow chart to the model. Call the external code from the chart, using MATLAB as the action language. Chart Programming Basics (Stateflow)Integrate External Code with Stateflow Charts You want to use the parfor function for parallel computing.Add a MATLAB Function block to the model. Embed the MATLAB code in the block. Integrate C Code by Using the MATLAB Function BlockMATLAB Function You have C or C++ programming experience and the external MATLAB code is compact and primarily uses C or C++ constructs.Manually convert the MATLAB code to C or C++ code. Choose an integration approach for C or C++ code.Integration Techniques for External C or C++ CodeSections of the external MATLAB code map to built-in blocks.Develop the algorithm in the context of a model, using the applicable built-in blocks. Interactive Model Editing and Project ManagementUse Products and Blocks Supported for Code Generation The external algorithm models continuous state dynamics.Write a MATLAB S-function and TLC file for the algorithm. Add the S-function to your model. Author Blocks Using MATLAB S-Functions Target Language Compiler\n\nTo embed external MATLAB code in a MATLAB Function or MATLAB System block or generate C or C++ code from MATLAB code with the MATLAB Coderâ¢, the MATLAB code must use functions and classes supported for C/C++ code generation. For more information, see Functions and Objects Supported for C/C++ Code Generation."
        },
        {
            "heading": "Integration Techniques for External C or C++ Code",
            "content": "Multiple techniques are available for integrating external C or C++ code into the Simulink environment. The following table helps you choose the best integration technique for your application.\n\nCondition or RequirementActionMore InformationYou want to integrate external C code with generated C++ code or converselyMatch the language choice for the generated code by modifying the language of the external code.Modify Programming Language of External Code to Match Generated Code You want to call a simple external C function from your model.Your function code does not require states.You do not want to customize the integration of the code.You want to easily integrate with Simulink Coverageâ¢, Simulink Testâ¢, and Simulink Design Verifierâ¢. Use the Simulink C Caller block.Integrate C Code Using C Caller Blocks You want to call multiple external C or C++ functions from a Simulink block or call functions conditionally. You want to include code to preprocess and postprocess data before and after calling external functions.You want to specify different code for simulation and code generation. Use the C Function blockIntegrate External C/C++ Code into Simulink Using C Function Blocks Your external C/C++ algorithm models simple dynamic systems with discrete states. You want to call external code for output, start, initialize conditions, and terminate code.Programming experience is limited. You want ease of use with basic flexibility for controlling what code the code generator produces for rapid prototyping. Use the C Function block. Integrate External C/C++ Code into Simulink Using C Function BlocksStart and Terminate Actions Within a C Function Block Your external C/C++ algorithm models simple dynamic systems with discrete states. You want to call external code for enabling, disabling and updating state code. Programming experience is limited. You want ease of use with basic flexibility for controlling what code the code generator produces for rapid prototyping. Generate S-function and TLC files by using the S-Function Builder. If necessary, refine the generated code manually to meet application requirements. (If you change the generated code, you lose the changes if you regenerate the S-function and TLC files.)Build S-Functions Automatically Using S-Function Builder Your external C/C++ algorithm models simple dynamic systems that have continuous states.You do not want to manually write a TLC file.Programming experience is limited. You want ease of use with basic flexibility for controlling what code the code generator produces for rapid prototyping. Generate S-function and TLC files by using the S-Function Builder. If necessary, refine the generated code manually to meet application requirements. (If you change the generated code, you lose the changes if you regenerate the S-function and TLC files.)Build S-Functions Automatically Using S-Function Builder Your external C/C++ algorithm models dynamic systems that have continuous states.You have C/C++ programming experience. You want to control what code the code generator produces for rapid prototyping. Manually write an S-function and TLC file. C/C++ S-Function Basics S-Functions and Code GenerationC S-Function Examples and C++ S-Function Examples The application requires more entry-point functions than the code generator typically producesâfor example, more than model_step, model_initialize, and model_terminate. You want maximum flexibility for controlling what code the code generator produces. Manually write an S-function and TLC file. C/C++ S-Function Basics S-Functions and Code GenerationC S-Function Examples and C++ S-Function Examples Your C/C++ algorithm includes design logic that is based on state machines and flow charts. Or, a function that you want to integrate must exchange data with a model by using global variables. The function defines the global variables and uses them to write output rather than returning a value or writing output to an argument.Add a Stateflow chart to the model. Call the external code from the chart, using C as the action language. In the chart, write code that calls the external function and reads from and writes to the global variables. To perform calculations with output of the external code, the model must read from the global variable during execution.Integrate External Code with Stateflow ChartsYou want to include external C/C++ code in a Stateflow chart for simulation and code generation.Configure the model that contains the chart to apply the external C or C++ code. Custom Code (Stateflow)Call C Library Functions in C Charts (Stateflow)Integrate External Code with Stateflow Charts You want to embed a call to external C/ C++ code from a model quickly. Performance is not an issue.Call the C/C++ code with the coder.ceval function from within a MATLAB Function block. coder.ceval functionIntegrate C Code by Using the MATLAB Function BlockMATLAB Function block"
        },
        {
            "heading": "Modify Programming Language of External Code to Match Generated Code",
            "content": "To integrate external C code with generated C++ code or conversely, modify the language of the external code to match the programming language of the generated code. To match the programing language of the external code with the generated code, use the appropriate approach explained below:\n\nRewrite the external code to match the programming language of the generated code.If you are generating C++ code and the external code is C code, for each C function, create a header file that prototypes the function. Use this format: #ifdef __cplusplus extern \"C\" { #endif int my_c_function_wrapper(); #ifdef __cplusplus } #endifThe prototype serves as a function wrapper. If your compiler supports C++ code, the value __cplusplus is defined. The linkage specification extern \"C\" specifies C linkage without name mangling.If you are generating C code and the external code is C++ code, include an extern \"C\" linkage specification in each .cpp file. For example, the following example shows C++ code in the file my_func.cpp:extern \"C\" { int my_cpp_function() { ... } }"
        },
        {
            "heading": "Integration Approaches for External Fortran Code",
            "content": "To integrate external Fortran code:\n\nWrite an S-function and corresponding TLC file.Add the S-function to your model.If necessary, add support files and control model code generation and builds within the Simulink environment.\n\nFor more information, see Integrate Fortran Code into Simulink."
        }
    ],
    "link": "https://in.mathworks.com/help/ecoder/ug/import-calls-to-external-reusable-algorithmic-code-into-models-for-code-generation.html",
    "images": []
}