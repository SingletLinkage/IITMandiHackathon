{
    "title": "Build Process Support for File and Folder Names",
    "introduction": "addAttribute",
    "chunks": [
        {
            "heading": "Filenames with Spaces",
            "content": "For the build process that uses ToolchainInfo objects, only these toolchains support the use of filenames containing spaces:\n\nGNU gcc/g++ | gmake (64-bit Linux) on LinuxÂ®MinGW64 | gmake (64-bit Windows) on WindowsÂ®Xcode with Clang | gmake (64-bit Mac) on Mac\n\nThe build process that uses template makefiles does not support the use of filenames containing spaces."
        },
        {
            "heading": "Folder Names with Spaces",
            "content": "On a Windows system, the code generator maps a drive corresponding to the MATLABÂ® installation folder for either of these conditions:\n\nThe matlabroot folder is a UNC location.The path the matlabroot folder contains spaces, and the system has no alternative name support.\n\nThese folder paths can contain spaces:\n\nThe path to your MATLAB installation folder (matlabroot). For example, C:\\Program Files\\MATLAB\\R2015bThe path to the current working folder where you start the build (pwd). For example, C:\\Users\\username\\Documents\\My Work.The path to the installation folder for a compiler that the build process uses.\n\nIf your work environment includes one or more of the preceding scenarios, use the following support mechanisms for the build process:\n\nIf you are using the toolchain approach to build generated code, the system support for spaces in folder names influences toolchain operation:For Linux systems and Windows systems with 8.3 name creation enabled, the toolchain manages spaces in folder names by using alternative names from the operating system. The toolchain uses the TransformPathsWithSpaces attribute to manage these names.addAttribute(toolchainObject, 'TransformPathsWithSpaces', true);The security permissions of drives and folders can determine whether the toolchain transforms the path. For example, if the path contains a folder with a security configuration that forbids 8.3 path transformations, the toolchain does not transform the path and the build process produces a warning.For Windows systems with 8.3 name creation disabled, the toolchain manages spaces in folder names by mapping a network drive using a batch file (.bat). This operation requires adding the RequiresBatchFile attribute to the toolchain definition.addAttribute(toolchainObject, 'RequiresBatchFile', true);When developing a toolchain for a Windows system, set both attributes. For more information about the toolchain attributes, see addAttribute.If you are using the template makefile approach to build generated code, the template makefile (.tmf) requires code to manage spaces in folder names. When the alternative folder names (Windows short names) differ from the file system folder names (Windows long names), add this code to the makefile.ALT_MATLAB_ROOT = |>ALT_MATLAB_ROOT<| ALT_MATLAB_BIN = |>ALT_MATLAB_BIN<| !if \"$(MATLAB_ROOT)\" != \"$(ALT_MATLAB_ROOT)\" MATLAB_ROOT = $(ALT_MATLAB_ROOT) !endif !if \"$(MATLAB_BIN)\" != \"$(ALT_MATLAB_BIN)\" MATLAB_BIN = $(ALT_MATLAB_BIN) !endifWhen the values of the location tokens are not equal, this code replaces MATLAB_ROOT with ALT_MATLAB_ROOT. The replacement indicates that the path to your MATLAB installation folder includes spaces. This code applies the same type of replacement for MATLAB_BIN with ALT_MATLAB_BIN. The preceding code is specific to nmake. For platform-specific examples, see the supplied template makefiles.\n\nWith either build approach, when there is an issue with support for creation of alternate names (short names), build errors can occur on Windows. If a build generates an error message similar to the following message, see Troubleshooting Errors When Folder Names Have Spaces.\n\nNMAKE : fatal error U1073: don't know how to make ' ...\n\nWhen using operating system commands, such as system or dos, enclose paths that specify executable files or command parameters in double quotes (\" \"). For example:\n\nsystem('dir \"D:\\Applications\\Common Files\"')\n\nThis table provides a summary of build folder support and limitations for Windows.\n\nBuild Process FoldersApproach for Paths with UNC or SpacesSupport for Windowsmatlabroot folderThe matlabroot value is derived from the MATLAB installation location.During a build, a UNC location such as:\\\\networkdrive\\matlab\\R20xxbcould be remapped as:T:\\During a build on a Windows system with short filename (8.3) support (default for Windows using NTFS), the build process uses the Windows API getShortPathName() for the folder location.During a build on a Windows system without short filename (8.3) support (systems using ReFS or using NTFS with 8.3 support disabled), a location with spaces in the path such as:C:\\Program Files\\MATLAB\\R20xxbcould be remapped as:T:\\R20xxbBuild process folder support available independent of file system (NTFS or ReFS) or file system configuration for short filename support.Limitations:On systems that require drive mapping for the installation location, the build process requires that a drive letter is available for mapping.On systems without short filename (8.3) support (using ReFS or using NTFS with 8.3 support disabled), the final folder in the installation location cannot contain spaces. For example, a final folder name:C:\\Program Files\\MATLAB\\R20xxb sp1is not supported.Code generation folderSimulation cache folderCustom code source file locationsâamong others, these locations include folders specified by:rtwmakecfg.mModel configuration parameter Additional build informationCode replacement libraryFor UNC locations, build process temporarily maps a drive by using the shell commands pushd and popd.Build process folder support is available independent of file system (NTFS or ReFS) or file system configuration for short path name support.For paths with spaces, build process uses the Windows short path name (8.3) by using the Windows API:getShortPathName()Build process folder support depends on NTFS file system and requires Windows default support. Registry sets value of 2 or 0 for:NtfsDisable8dot3NameCreationLimitations: Build process does not support spaces in the path to these folders for: NTFS file system with short path name support disabled ReFS file system (this file system does not support short path names)"
        },
        {
            "heading": "Troubleshooting Errors When Folder Names Have Spaces",
            "content": "On Windows, when there is an issue with support for creation of short filenames, build process errors can occur. When this issue affects a build, you see an error message similar to:\n\nNMAKE : fatal error U1073: don't know how to make 'C:\\Work\\My'\n\nThis message can occur if a space in the folder name (C:\\Work\\My Models) prevents the build process from finding the model or a file to build. For descriptions of the build-related folders that are sensitive to a space in the folder name or path, see Folder Names with Spaces.\n\nTo avoid issues from folder names with spaces when Windows short filename support for filenames is disabled, do not use paths with spaces. For example, install third-party software to paths without spaces. Do not use paths with spaces for folders containing your models, source files, or libraries.\n\nAn issue can occur with builds that use folder names with spaces, because it is possible to disable Windows alternate name support. The build process uses this alternate name support on Windows systems. There are many terms for this file, folder, and path alternate name support:\n\n8.3 nameDOS pathshort filename (SFN, ShortFileName)long name aliasWindows path alias\n\nVerify the type of file system that the drive uses. In Windows Explorer, right-click the drive icon and select properties.\n\nIf the file system is ReFS (Resilient File System), it is an issue. The ReFS does not provide short filename support. Except for the MATLAB installation folder, the build process does not support folder names with spaces for the ReFS file system. If your work environment requires short filename support for the build folder or for additional external code folders, do not use ReFS.If the file system is NTFS (New Technology File System), it is possible that the build error is related to a registry setting incompatibility. Continue with troubleshooting steps.\n\nThe error could stem from an issue with short filename support on a system using NTFS. Check the Windows registry setting that enables the creation of short names for files, folders, and paths.\n\nOpen the Windows command prompt, running as administrator. For example, from the Windows Start menu, type cmd, right-click the cmd.exe icon, and select Run as administrator.Change to the windows\\system32 folder and query the NtfsDisable8dot3NameCreation status by typing:> fsutil 8dot3name queryIf the registry state of NtfsDisable8dot3NameCreation is not 0 (enable 8dot3 name creation for all volumes on the system), change the value to 0 by typing:> fsutil 8dot3name set 0For more information about enabling creation of short names. See https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/ff621566(v=ws.11).Changing the registry setting enables creation of short names only for files and folders that are created after the change. To create short names for files created while short name creation was disabled, at the Windows command line, use the fsutil utility.To set the short name, the syntax is:> fsutil file setshortname <FileName> <ShortName>For example, to create the short name PROGRA~1 for the long name C:\\Program Files, type:> fsutil file setshortname \"C:\\Program Files\" PROGRA~1The C:\\Program Files folder name is in quotations because it has spaces. Â To verify that the short name was created, use the dir command with /x option to show short names.> dir C:\\ /x"
        },
        {
            "heading": "Folder Names with Special Characters",
            "content": "The build process might produce an error if a build-related folder path contains:\n\nUnicodeÂ® characters that do not belong to the system locale. This limitation does not apply if the build process uses a MicrosoftÂ® Visual C++Â® compiler.A Japanese (multibyte) character where the final byte is equal to the 5C hexadecimal character. The make and compiler tools might incorrectly interpret the final byte as the '\\' (backslash) character.One or more of these characters: '&' (ampersand)':' (colon)';' (semicolon)'$' (dollar sign)'(' (left parenthesis)')' (right parenthesis)'^' (circumflex accent)"
        },
        {
            "heading": "Very Long Folder Paths",
            "content": "For the MinGWÂ® compiler, the build process produces an error when the command line length exceeds the Windows limit of 32,767 characters. If this error occurs, check the length of include paths. You can reduce the command line length by building the generated code in a code generation folder that has a shorter name"
        }
    ],
    "link": "https://in.mathworks.com/help/rtw/ug/enable-build-process-for-folder-names-with-spaces.html#bviznfr",
    "images": []
}