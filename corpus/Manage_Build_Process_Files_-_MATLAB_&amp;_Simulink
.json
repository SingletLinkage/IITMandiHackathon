{
    "title": "Manage Build Process Files",
    "introduction": "To apply generated code source and header files from the build process, it is helpful to understand the files that the build process generates and the conditions that control file generation. This information provides access to generated code resources, such as: The code generator creates model.* files during the code generation and build process. You can customize the filenames for generated header, source, and data files. For more information, see Customize Generated File Names (Embedded Coder). The code generator creates additional folders and dependency files to support shared utilities and model references. For more information about the folders that the build process creates, see Manage Build Process Folders. For an example that shows how to use a project to manage build process folders, see Generate Code and Simulate Models in a Project. Depending on model architectures and code generation options, the build process for a GRT-based system target file can produce files that the build process does not generate for an ERT-based system target file. Also, for ERT-based system target files, the build process packages generated files differently than for GRT-based system target files. See Manage File Packaging of Generated Code Modules (Embedded Coder). The table describes the principal generated files. Within the generated filenames shown in the table, the model represents the name of the model for which you are generating code. The subsystem represents the name of a subsystem within the model. When you select the Create code generation report parameter, the code generator produces a set of HTML files. There is one HTML file for each source file plus a model_contents.html index file in the html subfolder within your build folder. The source and header files in the table have dependency relationships. For descriptions of other file dependencies, see Manage Build Process File Dependencies and Add Build Process Dependencies.",
    "chunks": [
        {
            "heading": "model.bat",
            "content": "This file contains Windows batch file commands that set the compiler environment and invoke the make utility.\n\nIf you are using the toolchain approach for the build process, you also can use this batch file to extract information from the generated makefile, model.mk. The information includes macro definitions and values that appear in the makefile, such as CFLAGS (C compiler flags) and CPP_FLAGS (C++ compiler flags). With the folder containing model.bat selected as the current working folder, in the Command Window, type:\n\n>> system('model.bat info')\n\nOn UNIX and Macintosh platforms, the code generator does not create the model.bat file. To extract information for toolchain approach builds from the generated makefile on these systems, in the Command Window, type:\n\n>> system('gmake -f model.mk info')"
        },
        {
            "heading": "model.h",
            "content": "The header file model.h declares model data structures and a public interface to the model entry points and data structures. This header file also provides an interface to the real-time model data structure (model_M) by using access macros. If your code interfaces to model functions or model data structures, include model.h:\n\nExported global signalsextern int32_T INPUT; /* '<Root>/In' */Global structure definitions/* Block parameters (auto storage) */ extern Parameters_mymodel mymodel_P;Real-time model (RTM) macro definitions#ifndef rtmGetSampleTime # define rtmGetSampleTime(rtm, idx) ((rtm)->Timing.sampleTimes[idx]) #endifModel entry-point functions (ERT example)extern void mymodel_initialize(void); extern void mymodel_step(void); extern void mymodel_terminate(void);\n\nTo generate model entry-point functions in files other than model.h and model.c, use a function customization template in the Embedded Coder Dictionary. For more information, see Configure Default C Code Generation for Categories of Data Elements and Functions (Embedded Coder).\n\nThe main.c (or .cpp) file includes model.h. If the model build generates the main.c (or .cpp) file from a TLC script, the TLC source can include model.h.\n\n#include \"%<CompiledModel.Name>.h\"\n\nIf main.c is a static source file, you can use the fixed header filename rtmodel.h. This file includes the model.h header file:\n\n#include \"model.h\" /* If main.c is generated */\n\nor\n\n#include \"rtmodel.h\" /* If static main.c is used */\n\nOther external source files can require to include model.h to interface to model data, for example exported global parameters or signals. The model.h file itself can have additional header dependencies due to requirements of generated code. See System Header Files and Code Generator Header Files.\n\nTo reduce dependencies and reduce the number of included header files, see Manage Build Process File Dependencies."
        },
        {
            "heading": "rtwtypes.h",
            "content": "When the configuration parameter Data type replacement is set to Use coder typedefs, the generated code includes rtwtypes.h. The header file rtwtypes.h defines data types, structures, and macros required by the generated code.\n\nOften, the generated code requires that integer operations overflow or underflow at specific values. For example, when the code expects a 16-bit integer, the code does not accept an 8-bit or a 32-bit integer type. The C language does not set a standard for the number of bits in types such as char and int.\n\nNoteBefore the creation of the C99 language standard, there was no universally accepted data type for sized integers. The C99 standard provides the header files stdint.h and stdbool.h. The stdint.h file contains sized-integer implementations that were previously unavailable.\n\nTo accommodate this feature of the C language, the generated code uses sized integer types, such as int8_T and uint32_T, which are not standard C types. In rtwtypes.h, the generated code maps these sized-integer types to the corresponding C keyword base type using information in the Hardware Implementation pane of the Configuration Parameters dialog box.\n\nThe code generator produces an optimized version of rtwtypes.h for ERT-based system target files when the model does not contain noninlined S-functions. The optimized rtwtypes.h file contains definitions that are specific to the hardware configuration of the model.\n\nThe location of rtwtypes.h depends on whether the build process uses the shared utilities location. If it uses a shared location, the code generator places rtwtypes.h in slprj/target/_sharedutils. Otherwise, it places rtwtypes.h in the build folder (model_target_rtw). See Specify Generated Code Interfaces and Control Placement of rtwtypes.h for Shared Utility Code (Embedded Coder).\n\nSource files include the rtwtypes.h header file when the source files use code generator type names or other code generator definitions. For example, files that declare variables by using a code generator data type:\n\nuint32_T myvar\n\nIn some cases, an S-function, custom source file is compiled, first, by the mex command, and second, by the code generation build. During mex compilation, rtwtypes.h is typically unavailable. To obtain the definitions normally supplied by rtwtypes.h, the custom source file can conditionally (through the MATLAB_MEX_FILE macro definition) include tmwtypes.h:\n\n#ifdef MATLAB_MEX_FILE #include \"tmwtypes.h\" #else #include \"rtwtypes.h\" #endif\n\nA source file for the code generator main.c (or .cpp) file includes rtwtypes.h without preprocessor checks.\n\n#include \"rtwtypes.h\"\n\nCustom source files that the Target Language Compiler generates can also emit the include statements into their generated file.\n\nIf the Data type replacement configuration parameter is set to Use C data types with fixed-width integers, the code generator does not create rtwtypes.h because the generated code does not require definitions from rtwtypes.h. If the generated code uses static files under matlabroot that require Simulink Coder data type definitions, the software generates a simplified version of rtwtypes.h. If you have custom code that includes rtwtypes.h, you can force the generation of the simplified version of rtwtypes.h by selecting the Coder typedefs compatibility check box.\n\n√Ç Simplified rtwtypes.h\n\n/* * File: rtwtypes.h * * This version of rtwtypes.h is generated for * compatibility with custom source code or static * source files that are located under matlabroot. * Automatically generated code does not have to * include this file. */ #ifndef RTWTYPES_H #define RTWTYPES_H #include <stdint.h> #include <stdbool.h> typedef int8_t int8_T; typedef uint8_t uint8_T; typedef int16_t int16_T; typedef uint16_t uint16_T; typedef int32_t int32_T; typedef uint32_t uint32_T; typedef bool boolean_T; typedef char char_T; typedef char byte_T; typedef int int_T; typedef unsigned char uchar_T; typedef unsigned int uint_T; typedef unsigned long ulong_T; #define MIN_int8_T INT8_MIN #define MAX_int8_T INT8_MAX #define MAX_uint8_T UINT8_MAX #define MIN_int16_T INT16_MIN #define MAX_int16_T INT16_MAX #define MAX_uint16_T UINT16_MAX #define MIN_int32_T INT32_MIN #define MAX_int32_T INT32_MAX #define MAX_uint32_T UINT32_MAX #endif /* RTWTYPES_H */"
        }
    ],
    "link": "https://in.mathworks.com/help/rtw/ug/build-process-files.html",
    "images": [
        "https://in.mathworks.com/help/includes/product/images/doc_center/arrow_right.gif"
    ]
}