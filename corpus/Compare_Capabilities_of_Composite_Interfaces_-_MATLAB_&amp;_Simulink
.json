{
    "title": "Compare Capabilities of Composite Interfaces",
    "introduction": "Before you implement a piece of your system using a specific type of composite interface, consider whether the type satisfies your requirements for composite interface elements, modeling, and code generation. To identify which composite interfaces to consider based on high-level guidelines and ideal use cases, see Explore Composite Interfaces.",
    "chunks": [
        {
            "heading": "Composite Interface Elements",
            "content": "RequirementVirtual BusesNonvirtual BusesArrays of BusesArraysHierarchical elementsSupportedElements of virtual buses can have hierarchy.SupportedElements of nonvirtual buses can have hierarchy.SupportedWhile an array of buses is flat, the nested buses can have hierarchy.Not supportedWhile you can concatenate signals in stages to create an array, the result is flat, as if you used a single block to concatenate the signals.Elements with different sample timesSupportedElements of virtual buses can have different sample times.For faster model compilation, use the same sample time for each element of a virtual bus. To change the sample time of an input element, use a Rate Transition block.Not supportedAll elements of a nonvirtual bus must use the same sample time.Use a Rate Transition block to change the sample time of signals in a bus. For more information, see Modify Sample Times for Nonvirtual Buses.Not supportedAll elements of an array of buses must use the same sample time.Not supportedAll elements of an array must use the same sample time.Elements with different data typesSupportedElements of virtual buses can have different data types.SupportedElements of nonvirtual buses can have different data types.SupportedTop-level elements of arrays of buses must specify the same Simulink.Bus object data type. Elements of the nested buses can have different data types.Not supportedAll elements of an array must have the same data type.Variable-size signalsSupportedVirtual buses can contain variable-size signals as long as they are not used as inputs to or outputs from a referenced model.Supported Nonvirtual buses can contain variable-size signals.Signal logging is supported for nonvirtual buses with variable-size signals when running a simulation in normal or accelerator mode. (since R2023a)SupportedArrays of buses can contain variable-size signals only for simulations in normal mode.Signal logging is supported for arrays of buses with variable-size signals only when running a simulation in normal mode. (since R2023a)SupportedArrays can contain variable-size signals.Function-call signalsSupportedA virtual bus can contain function-call signals as long as the bus is not defined by a Simulink.Bus object.Not supportedNonvirtual buses do not support function-call signals.Not supportedArrays of buses do not support function-call signals.Not supportedArrays do not support function-call signals.To group function-call signals in a virtual vector, see Mux.MessagesSupportedVirtual buses can have message elements as long as they do not also have signal elements.Not supportedNonvirtual buses cannot contain message elements.Not supportedArrays of buses cannot contain message elements.Not supportedArrays cannot contain message elements.Physical conserving connectionsNot supportedSimulinkÂ® buses do not support physical conserving connections.To group physical conserving connections, use a Simscape Bus (Simscape) block.Not supportedSimulink buses do not support physical conserving connections.Not supportedArrays of buses do not support physical conserving connections.SupportedArrays support physical conserving connections. For more information, see Nonscalar Physical Signal Connections (Simscape)."
        },
        {
            "heading": "Composite Interface Modeling",
            "content": "RequirementVirtual BusesNonvirtual BusesArrays of BusesArraysName-based element accessSupportedYou can access the elements of virtual buses by name.SupportedYou can access the elements of nonvirtual buses by name.Not supportedYou can access the top-level elements of arrays of buses only by index.Not supportedYou can access the elements of an array only by index.Element access at component input portsSupportedTo select elements of a virtual bus at an input port, use In Bus Element blocks.SupportedTo select elements of a nonvirtual bus at an input port, use In Bus Element blocks.Not supportedIn Bus Element blocks can pass an array of buses through the interface, but they cannot select the index-based elements of arrays of buses.Not supportedIn Bus Element blocks can pass an array through the interface, but they cannot select the index-based elements of the array.Composite interface definition at component input portsSupportedTo define an input virtual bus for a model component, specify the virtual bus and its elements with one or more In Bus Element blocks.SupportedTo define an input nonvirtual bus for a model component, specify the nonvirtual bus with one or more In Bus Element blocks.For the element that you want to be a nonvirtual bus: Set Data type to a Simulink.Bus object.Set Bus virtuality to nonvirtual. SupportedTo define an input array of buses for a model component, specify the array of buses with an In Bus Element block.For the element that you want to be an array of buses: Set Data type to a Simulink.Bus object.Set Bus virtuality to nonvirtual.Set Dimensions to an integer greater than 1. SupportedTo define an input array for a model component, specify the array with a Simulink.ValueType object as the data type of the input.Composite interface creation at component output portsSupportedTo create a virtual bus at an output port, connect the desired elements of the virtual bus to Out Bus Element blocks that correspond to the same output port.SupportedTo create a nonvirtual bus at an output port, connect the desired elements of the nonvirtual bus to Out Bus Element blocks that correspond to the same output port. Then, edit the signal attributes of the bus. Set Data type to a Simulink.Bus object.Set Bus virtuality to nonvirtual. Not supportedOut Bus Element blocks can pass an array of buses through the interface, but they cannot create an array of buses.Not supportedOut Bus Element blocks can pass an array through the interface, but they cannot create an array.Incremental interface changes using port blocksSupportedYou can add, remove, and modify elements of a virtual bus at an interface with or without changing the block diagram by using In Bus Element and Out Bus Element blocks.Not supportedYou cannot make incremental interface changes to nonvirtual buses using port blocks.To modify a nonvirtual bus, modify the corresponding Simulink.Bus object.Not supportedWhile you can change the dimensions of an array of buses at an interface by using port blocks, you cannot change the elements at the interface.To modify the elements of an array of buses, modify the corresponding Simulink.Bus object or use Selector and Vector Concatenate blocks.Not supportedYou cannot make incremental interface changes to arrays using port blocks.To modify an array, use Selector and Vector Concatenate blocks.Defined interfaces in simulationSupportedTo define the properties of a virtual bus, you can use a Simulink.Bus object or specify element attributes with In Bus Element and Out Bus Element blocks.SupportedNonvirtual buses require Simulink.Bus objects, which define bus properties.SupportedTo define the properties of an array of buses, use a Simulink.ValueType object.SupportedTo define the properties of an array, use a Simulink.Signal or Simulink.ValueType object.Iterative processing of subsystemsNot supportedVirtual buses do not support iterative processing of subsystems.Not supportedNonvirtual buses do not support iterative processing of subsystems.Group nonvirtual buses in arrays of buses to iteratively process them in a subsystem such as a for-each, while-iterator, or for-iterator subsystem.SupportedArrays of buses let you iterate over a group of nonvirtual buses. Connect the array of buses to a subsystem such as a for-each, while-iterator, or for-iterator subsystem.SupportedArrays let you iterate over a group of signals. Connect the array to a subsystem such as a for-each, while-iterator, or for-iterator subsystem."
        },
        {
            "heading": "Composite Interface Code Generation",
            "content": "RequirementVirtual BusesNonvirtual BusesArrays of BusesArraysStructures in generated codeNot supportedVirtual buses do not appear as structures in the generated code. While you can specify a Simulink.Bus object data type for a virtual bus, the generated code does not apply the type.SupportedNonvirtual buses appear as structures in the generated code. The corresponding Simulink.Bus objects represent the structure types.For more information, see Organize Data into Structures in Generated Code (Simulink Coder).SupportedArrays of buses appear as arrays of structures in the generated code. The corresponding Simulink.Bus objects represent the structure types.Not supportedArrays appear as vectors in the generated code.For more information, see Code Generation of Matrices and Arrays (Simulink Coder).Individual data elements at interfaceSupportedFor a virtual bus, the generated code appears as if the bus did not exist. The code generator is able to fully optimize the signals in a virtual bus. For more information, see Generate Efficient Code for Buses (Simulink Coder).Not supportedA nonvirtual bus is represented as a whole in the generated code. A nonvirtual bus can require data copies.Not supportedAn array of buses is represented as a whole in the generated code. An array of buses can require data copies.Not supportedAn array is represented as a whole in the generated code. An array can require data copies."
        }
    ],
    "link": "https://in.mathworks.com/help/simulink/ug/compare-capabilities-of-composite-interfaces.html",
    "images": []
}